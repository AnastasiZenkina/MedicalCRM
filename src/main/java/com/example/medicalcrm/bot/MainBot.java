package com.example.medicalcrm.bot;

import com.example.medicalcrm.config.BotConfig;
import com.example.medicalcrm.entity.BotUser;
import com.example.medicalcrm.service.BotUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

@Component("mainBot")
@RequiredArgsConstructor
public class MainBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final BotUserService botUserService;

    @Override
    public String getBotUsername() {
        return botConfig.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();

            if (botUserService.getBotUserByTelegramId(chatId).isEmpty()) {
                BotUser user = new BotUser();
                user.setTelegramId(chatId);
                user.setUsername(username);
                user.setRole("PATIENT");
                botUserService.saveBotUser(user);
            }

            String role = botUserService.getBotUserByTelegramId(chatId)
                    .map(BotUser::getRole)
                    .orElse("PATIENT");

            if (update.getMessage().hasText()) {
                String text = update.getMessage().getText();
                SendMessage message = new SendMessage();
                message.setChatId(chatId.toString());

                if (role.equals("DOCTOR")) {
                    if (text.equalsIgnoreCase("/–æ—Ç—á—ë—Ç") || text.equalsIgnoreCase("/–æ—Ç—á–µ—Ç")) {
                        message.setText("üß† –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n(–¢—É—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)");
                    } else if (text.equalsIgnoreCase("/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞")) {
                        message.setText("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n(–¢—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)");
                    } else {
                        message.setText("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–∫—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–æ—Ç—á—ë—Ç –∏–ª–∏ /–∞–Ω–∞–ª–∏—Ç–∏–∫–∞.");
                    }
                } else {
                    if (text.equalsIgnoreCase("/start")) {
                        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + username + "! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
                    } else {
                        message.setText("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üß°");
                    }
                }

                try {
                    execute(message);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (update.getMessage().hasPhoto()) {
                SendMessage photoReply = new SendMessage();
                photoReply.setChatId(chatId.toString());
                photoReply.setText("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –≤—Ä–∞—á—É.");

                try {
                    execute(photoReply);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
