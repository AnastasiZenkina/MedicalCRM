package com.example.medicalcrm.bot;
import com.example.medicalcrm.config.DoctorConfig;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

@Component
@RequiredArgsConstructor
public class DoctorBot extends TelegramLongPollingBot{
    private final DoctorConfig doctorConfig;

    @Override
    public String getBotUsername(){
        return doctorConfig.getBotUsername();
    }

    @Override
    public String getBotToken(){
        return doctorConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update){
        if(update.hasMessage() && update.getMessage().hasText()){
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());

            if(text.equalsIgnoreCase("/–æ—Ç—á—ë—Ç") || text.equalsIgnoreCase("/–æ—Ç—á–µ—Ç")){
                message.setText("üß† –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n(–¢—É—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)");
            }
            else if(text.equalsIgnoreCase("/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞")){
                message.setText("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n(–¢—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)");
            }
            else{
                message.setText("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤—Ä–∞—á-–±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ—Ç—á—ë—Ç –∏–ª–∏ /–∞–Ω–∞–ª–∏—Ç–∏–∫–∞.");
            }

            try{
                execute(message);
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}
