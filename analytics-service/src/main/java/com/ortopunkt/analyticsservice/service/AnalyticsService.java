package com.ortopunkt.analyticsservice.service;

import com.ortopunkt.dto.response.ApplicationResponseDto;
import com.ortopunkt.dto.response.PatientResponseDto;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class AnalyticsService {

    private final AnalyticsHttpClient applicationClient;

    public String getMonthlyApplications() {
        // –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        LocalDate monthAgo = LocalDate.now().withDayOfMonth(1);

        // –≤—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü
        List<ApplicationResponseDto> recent = applicationClient.getAllApplications().stream()
                .filter(app -> app.getCreatedAt() != null && !app.getCreatedAt().isBefore(monthAgo))
                .toList();

        // —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ tgId –≤—Å–µ—Ö –Ω–∞–ø–∏—Å–∞–≤—à–∏—Ö
        Set<String> tgIds = recent.stream()
                .map(app -> {
                    PatientResponseDto patient = app.getPatient();
                    return patient != null ? patient.getTgId() : null;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());

        int total = tgIds.size();

        // --- –ó–∞–ø–∏—Å–∞–ª–∏—Å—å ---
        int booked = getTotalBooked(recent);
        double bookedPercent = total == 0 ? 0 : (booked * 100.0 / total);

        // —Å–±–æ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞
        StringBuilder sb = new StringBuilder();
        sb.append("üìù <b>–ó–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü</b>:\n\n")
                .append("–í—Å–µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–æ: <b>").append(total).append("</b> —á–µ–ª–æ–≤–µ–∫\n")
                .append("–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: <b>").append(booked).append("</b>\n")
                .append("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–ø–∏—Å—å: ").append(String.format("%.1f", bookedPercent)).append("%\n\n");

        // —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        Set<String> seen = new HashSet<>();
        for (ApplicationResponseDto app : recent) {
            PatientResponseDto p = app.getPatient();
            if (p != null) {
                String id = p.getTgId();
                if (id != null && seen.add(id)) {
                    String name = p.getName() != null ? p.getName() : "";
                    String username = p.getUsername() != null ? "(@" + p.getUsername() + ")" : "";
                    sb.append("‚Ä¢ ").append(name).append(" ").append(username).append("\n");
                }
            }
        }

        return sb.toString();
    }

    private int getTotalBooked(List<ApplicationResponseDto> recent) {
        return recent.stream()
                .filter(app -> "–ó–∞–ø–∏—Å–∞–Ω".equalsIgnoreCase(app.getStatus()))
                .map(app -> {
                    PatientResponseDto patient = app.getPatient();
                    return patient != null ? patient.getTgId() : null;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toSet())
                .size();
    }
}
